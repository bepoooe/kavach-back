{"version":3,"file":"content.js","mappings":";;AAAA;AACA;AACA;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://kavach-trial/webpack/bootstrap","webpack://kavach-trial/webpack/runtime/make namespace object","webpack://kavach-trial/./src/content/index.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// Content script for detecting privacy policies and injecting tracking detection\nclass ContentScript {\n    constructor() {\n        this.privacyPolicyUrls = [];\n        this.optedOutDomains = new Set();\n        console.log('🔍 Kavach Content Script starting on:', window.location.href);\n        this.checkOptOutStatus();\n        this.detectPrivacyPolicies();\n        this.injectTrackingDetector();\n        this.setupOptOutListeners();\n        console.log('✅ Kavach Content Script initialized');\n    }\n    async checkOptOutStatus() {\n        const domain = window.location.hostname;\n        try {\n            const storage = await chrome.storage.local.get([`optedOut_${domain}`]);\n            if (storage[`optedOut_${domain}`]) {\n                this.optedOutDomains.add(domain);\n                console.log('🚫 Domain is opted out:', domain);\n                this.enforceOptOutState();\n            }\n        }\n        catch (error) {\n            console.log('Could not check opt-out status:', error);\n        }\n    }\n    enforceOptOutState() {\n        // Block tracking scripts and pixels\n        const observer = new MutationObserver((mutations) => {\n            mutations.forEach((mutation) => {\n                mutation.addedNodes.forEach((node) => {\n                    if (node.nodeType === Node.ELEMENT_NODE) {\n                        const element = node;\n                        // Block tracking scripts\n                        if (element.tagName === 'SCRIPT') {\n                            const script = element;\n                            const src = script.src?.toLowerCase() || '';\n                            const content = script.textContent?.toLowerCase() || '';\n                            const trackingPatterns = [\n                                'google-analytics', 'googletagmanager', 'gtag', 'ga(',\n                                'facebook.com/tr', 'connect.facebook', 'fbq(',\n                                'doubleclick', 'adsystem', 'googlesyndication'\n                            ];\n                            if (trackingPatterns.some(pattern => src.includes(pattern) || content.includes(pattern))) {\n                                script.remove();\n                                console.log('🚫 Blocked tracking script:', src.substring(0, 50));\n                            }\n                        }\n                        // Block tracking pixels\n                        if (element.tagName === 'IMG') {\n                            const img = element;\n                            const src = img.src?.toLowerCase() || '';\n                            if (src.includes('track') || src.includes('pixel') || src.includes('beacon')) {\n                                img.remove();\n                                console.log('🚫 Blocked tracking pixel:', src.substring(0, 50));\n                            }\n                        }\n                    }\n                });\n            });\n        });\n        observer.observe(document, { childList: true, subtree: true });\n    }\n    setupOptOutListeners() {\n        // Listen for messages from popup\n        chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n            if (request.action === 'performOptOut') {\n                this.handleOptOutRequest();\n                sendResponse({ success: true });\n            }\n        });\n    }\n    handleOptOutRequest() {\n        // Additional page-specific opt-out handling\n        this.clickConsentButtons();\n        this.disableTrackingMethods();\n        this.clearPageStorage();\n    }\n    clickConsentButtons() {\n        // Enhanced consent button detection and clicking\n        setTimeout(() => {\n            const consentButtons = [\n                // Generic opt-out buttons\n                'button[data-testid*=\"reject\"]',\n                'button[data-testid*=\"decline\"]',\n                'button[data-testid*=\"opt-out\"]',\n                '[data-cy*=\"reject\"]',\n                '[data-cy*=\"decline\"]',\n                // YouTube/Google specific\n                '[aria-label=\"Reject all\"]',\n                '[data-testid=\"reject-all-button\"]',\n                'button[jsname=\"b3VHJd\"]',\n                'button[data-value=\"2\"]',\n                '.VfPpkd-LgbsSe[aria-label*=\"Reject\"]',\n                '.QS5gu',\n                '[jsaction*=\"reject\"]',\n                'c-wiz button[aria-label*=\"Reject\"]',\n                'form[action*=\"consent\"] button:last-child',\n                // Specific CMP platforms\n                '#onetrust-reject-all-handler',\n                '.optanon-category-2',\n                '.optanon-category-3',\n                '.optanon-category-4',\n                '[data-cy=\"manage-consent-reject-all\"]',\n                '.sp_choice_type_REJECT_ALL',\n                '#truste-consent-required',\n                // Common cookie banner selectors\n                '.cookie-banner button[data-role=\"reject\"]',\n                '.gdpr-banner .reject-all',\n                '.consent-manager .decline-all'\n            ];\n            // Click with multiple attempts for YouTube's dynamic loading\n            const clickButtons = () => {\n                consentButtons.forEach(selector => {\n                    const elements = document.querySelectorAll(selector);\n                    elements.forEach(element => {\n                        try {\n                            element.click();\n                            console.log('🖱️ Clicked consent button:', selector);\n                        }\n                        catch (e) {\n                            // Continue\n                        }\n                    });\n                });\n                // YouTube-specific text-based detection\n                if (window.location.hostname.includes('youtube.com')) {\n                    const allButtons = document.querySelectorAll('button, [role=\"button\"]');\n                    allButtons.forEach(button => {\n                        const text = button.textContent?.toLowerCase() || '';\n                        const ariaLabel = button.getAttribute('aria-label')?.toLowerCase() || '';\n                        if (text.includes('reject all') || text.includes('turn off') ||\n                            ariaLabel.includes('reject all') || text.includes('no thanks')) {\n                            try {\n                                button.click();\n                                console.log('🖱️ Clicked YouTube consent button:', text.substring(0, 30));\n                            }\n                            catch (e) {\n                                // Continue\n                            }\n                        }\n                    });\n                }\n            };\n            // Multiple clicks with delays for YouTube\n            clickButtons();\n            setTimeout(clickButtons, 1000);\n            setTimeout(clickButtons, 3000);\n            setTimeout(clickButtons, 5000);\n        }, 1000);\n    }\n    disableTrackingMethods() {\n        // Override common tracking functions\n        const trackingMethods = ['gtag', 'ga', 'fbq', '_paq', 'mixpanel'];\n        trackingMethods.forEach(method => {\n            if (window[method]) {\n                window[method] = () => console.log(`Tracking method ${method} disabled by Kavach`);\n            }\n        });\n    }\n    clearPageStorage() {\n        try {\n            localStorage.clear();\n            sessionStorage.clear();\n            console.log('🧹 Cleared page storage');\n        }\n        catch (error) {\n            console.log('Could not clear page storage:', error);\n        }\n    }\n    detectPrivacyPolicies() {\n        // Look for privacy policy links with better detection\n        const selectors = [\n            'a[href*=\"privacy\"]',\n            'a[href*=\"terms\"]',\n            'a[href*=\"policy\"]',\n            'a[href*=\"legal\"]',\n            'a[href*=\"gdpr\"]',\n            'a[href*=\"ccpa\"]'\n        ];\n        const privacyKeywords = [\n            'privacy policy',\n            'privacy statement',\n            'privacy notice',\n            'terms of service',\n            'terms and conditions',\n            'data policy',\n            'cookie policy',\n            'legal',\n            'gdpr',\n            'ccpa'\n        ];\n        // Check link hrefs and text content\n        selectors.forEach(selector => {\n            const links = document.querySelectorAll(selector);\n            links.forEach(link => {\n                const href = link.href;\n                const text = link.textContent?.toLowerCase() || '';\n                if (href && !this.privacyPolicyUrls.includes(href)) {\n                    // Check if the link text contains privacy-related keywords\n                    const isPrivacyRelated = privacyKeywords.some(keyword => text.includes(keyword) || href.toLowerCase().includes(keyword));\n                    if (isPrivacyRelated) {\n                        this.privacyPolicyUrls.push(href);\n                    }\n                }\n            });\n        });\n        // Also check for common footer links\n        const footerElements = document.querySelectorAll('footer, .footer, [class*=\"footer\"]');\n        footerElements.forEach(footer => {\n            const links = footer.querySelectorAll('a');\n            links.forEach(link => {\n                const href = link.href;\n                const text = link.textContent?.toLowerCase() || '';\n                if (href && !this.privacyPolicyUrls.includes(href)) {\n                    const isPrivacyRelated = privacyKeywords.some(keyword => text.includes(keyword));\n                    if (isPrivacyRelated) {\n                        this.privacyPolicyUrls.push(href);\n                    }\n                }\n            });\n        });\n        // Send privacy policy URLs to background script\n        if (this.privacyPolicyUrls.length > 0) {\n            chrome.runtime.sendMessage({\n                action: 'privacyPoliciesFound',\n                urls: this.privacyPolicyUrls,\n                currentUrl: window.location.href\n            }).catch(error => {\n                console.log('Failed to send privacy policy URLs:', error);\n            });\n        }\n    }\n    injectTrackingDetector() {\n        // Inject script to detect client-side tracking\n        const script = document.createElement('script');\n        script.src = chrome.runtime.getURL('injected.js');\n        script.onload = function () {\n            // Remove the script element after loading\n            this.remove();\n        };\n        (document.head || document.documentElement).appendChild(script);\n    }\n    init() {\n        // Initialize after DOM is ready\n        if (document.readyState === 'loading') {\n            document.addEventListener('DOMContentLoaded', () => {\n                setTimeout(() => {\n                    // Re-scan for privacy policies after DOM is fully loaded\n                    this.detectPrivacyPolicies();\n                }, 1000);\n            });\n        }\n        else {\n            setTimeout(() => {\n                // Re-scan for privacy policies\n                this.detectPrivacyPolicies();\n            }, 1000);\n        }\n        // Also scan again after a delay to catch dynamically loaded content\n        setTimeout(() => {\n            this.detectPrivacyPolicies();\n        }, 3000);\n    }\n}\nconst contentScript = new ContentScript();\ncontentScript.init();\nexport {};\n"],"names":[],"sourceRoot":""}